// <auto-generated />
using System;
using InventoryDemo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryDemo.Infrastructure.Migrations
{
    [DbContext(typeof(InventoryDemoDbContext))]
    [Migration("20230626165153_update-entire-database")]
    partial class updateentiredatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InventoryDemo.Core.Entities.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"), 1L, 1);

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"), 1L, 1);

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Operator", b =>
                {
                    b.Property<int>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatorId"), 1L, 1);

                    b.Property<string>("OperatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatorId");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Record", b =>
                {
                    b.Property<int>("POnumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("POnumber"), 1L, 1);

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LOTnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProductCode")
                        .HasColumnType("int");

                    b.HasKey("POnumber");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.RecordMachine", b =>
                {
                    b.Property<int>("RecordPOnumber")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.HasKey("RecordPOnumber", "MachineId");

                    b.HasIndex("MachineId");

                    b.ToTable("RecordMachines");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.RecordOperator", b =>
                {
                    b.Property<int>("RecordPOnumber")
                        .HasColumnType("int");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.HasKey("RecordPOnumber", "OperatorId");

                    b.HasIndex("OperatorId");

                    b.ToTable("RecordOperators");
                });

            modelBuilder.Entity("RecordMaterial", b =>
                {
                    b.Property<int>("RecordPOnumber")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("RecordPOnumber", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("RecordMaterial", (string)null);
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.RecordMachine", b =>
                {
                    b.HasOne("InventoryDemo.Core.Entities.Machine", "Machine")
                        .WithMany("RecordMachines")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDemo.Core.Entities.Record", "Record")
                        .WithMany("RecordMachines")
                        .HasForeignKey("RecordPOnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.RecordOperator", b =>
                {
                    b.HasOne("InventoryDemo.Core.Entities.Operator", "Operator")
                        .WithMany("RecordOperators")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDemo.Core.Entities.Record", "Record")
                        .WithMany("RecordOperators")
                        .HasForeignKey("RecordPOnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("RecordMaterial", b =>
                {
                    b.HasOne("InventoryDemo.Core.Entities.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecordMaterial_Materials_MaterialId");

                    b.HasOne("InventoryDemo.Core.Entities.Record", null)
                        .WithMany()
                        .HasForeignKey("RecordPOnumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecordMaterial_Records_RecordPOnumber");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Machine", b =>
                {
                    b.Navigation("RecordMachines");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Operator", b =>
                {
                    b.Navigation("RecordOperators");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Record", b =>
                {
                    b.Navigation("RecordMachines");

                    b.Navigation("RecordOperators");
                });
#pragma warning restore 612, 618
        }
    }
}
