// <auto-generated />
using System;
using InventoryDemo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryDemo.Infrastructure.Migrations
{
    [DbContext(typeof(InventoryDemoDbContext))]
    [Migration("20230614160344_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InventoryDemo.Core.Entities.Machines", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"), 1L, 1);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("MachineDescription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("MachineId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Parts", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartId"), 1L, 1);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("PartDescription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("PartId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Warehouses", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("MachinesMachineId")
                        .HasColumnType("int");

                    b.Property<int>("PartsPartId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("WarehouseId");

                    b.HasIndex("MachinesMachineId");

                    b.HasIndex("PartsPartId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("MachinesParts", b =>
                {
                    b.Property<int>("MachinesMachineId")
                        .HasColumnType("int");

                    b.Property<int>("PartsPartId")
                        .HasColumnType("int");

                    b.HasKey("MachinesMachineId", "PartsPartId");

                    b.HasIndex("PartsPartId");

                    b.ToTable("MachineandPart", (string)null);
                });

            modelBuilder.Entity("InventoryDemo.Core.Entities.Warehouses", b =>
                {
                    b.HasOne("InventoryDemo.Core.Entities.Machines", "Machines")
                        .WithMany()
                        .HasForeignKey("MachinesMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDemo.Core.Entities.Parts", "Parts")
                        .WithMany()
                        .HasForeignKey("PartsPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machines");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("MachinesParts", b =>
                {
                    b.HasOne("InventoryDemo.Core.Entities.Machines", null)
                        .WithMany()
                        .HasForeignKey("MachinesMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryDemo.Core.Entities.Parts", null)
                        .WithMany()
                        .HasForeignKey("PartsPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
